//
//  MapInteractor.swift
//  GeoPos
//
//  Created by Matthew on 06.04.2021.
//  Copyright (c) 2021 Ostagram Inc.. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation
import RxSwift
import RxCocoa


protocol MapBusinessLogic {
    func startTracking(request: MapModel.StartTracking.Request)
    func stopTracking(request: MapModel.StopTracking.Request)
    func loadTrack(request: MapModel.LoadTrack.Request)
}

protocol MapDataStore {
    //var name: String { get set }
    var locationManager: CLLocationManager? { get set }
    var dbService: DBService? { get set }
    var routePoints: [Coordinate] { get set }
}

class MapInteractor: NSObject, MapBusinessLogic, MapDataStore {
    var presenter: MapPresentationLogic?
    
    var locationManager: CLLocationManager?
    var dbService: DBService?
    var routePoints: [Coordinate] = []
    let rxLocation = BehaviorRelay<CLLocationCoordinate2D?>(value: nil)
    var rxSubscription: Disposable?
    
    // MARK: Do something
    
    func startTracking(request: MapModel.StartTracking.Request) {
        routePoints = []
        initLocationManager()
        locationManager?.startUpdatingLocation()
        locationManager?.startMonitoringSignificantLocationChanges()
        locationManager?.delegate = self
        presenter?.presentStartTracking(response: .init())
        
        rxSubscription = rxLocation.subscribe(onNext: {  [weak self] location in
            if let location = location {
                let coordinate = Coordinate(
                            latitude: location.latitude,
                            longitude: location.longitude)
                self?.addCoordinate(coordinate)
            }
        })
    }
    
    func stopTracking(request: MapModel.StopTracking.Request) {
        rxSubscription?.dispose()
        locationManager?.delegate = nil
        locationManager?.stopUpdatingLocation()
        locationManager?.stopMonitoringSignificantLocationChanges()
        dbService?.purgeCoordinates()
        dbService?.save(coordinates: routePoints)
        presenter?.presentStopTracking(response: .init())
    }
    
    func loadTrack(request: MapModel.LoadTrack.Request) {
        locationManager?.stopUpdatingLocation()
        locationManager?.stopMonitoringSignificantLocationChanges()
        let coordinates = dbService?.fetchCoordinates()
        let response = MapModel.LoadTrack.Response(
            track: coordinates ?? []
        )
        presenter?.presentTrack(response: response)
    }
    
    func addCoordinate(_ coordinate: Coordinate) {
        routePoints.append(coordinate)
        presenter?.presentCoordinate(response: .init(coordinate: coordinate))
    }
    
    func initLocationManager() {
        locationManager?.allowsBackgroundLocationUpdates = true
        locationManager?.pausesLocationUpdatesAutomatically = false
        locationManager?.desiredAccuracy = kCLLocationAccuracyNearestTenMeters
        locationManager?.stopUpdatingLocation()
        locationManager?.stopMonitoringSignificantLocationChanges()
        locationManager?.requestAlwaysAuthorization()
    }
}

extension MapInteractor: CLLocationManagerDelegate {
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        guard let location = locations.last else {
            return
        }
        print(location)
        rxLocation.accept(location.coordinate)
    }
    
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error){
        print(error)
    }
}
