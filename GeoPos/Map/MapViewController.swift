//
//  MapViewController.swift
//  GeoPos
//
//  Created by Matthew on 06.04.2021.
//  Copyright (c) 2021 Ostagram Inc.. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoogleMaps


protocol MapDisplayLogic: class {
    func updateScene(viewModel: MapModel.ViewModel)
}

class MapViewController: UIViewController, MapDisplayLogic {
    var interactor: MapBusinessLogic?
    var route: GMSPolyline?
    var onLogout: (() -> Void)?
    var marker: GMSMarker?
    
    
    
    
    // MARK: Object lifecycle
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        route = GMSPolyline()
        route?.map = mapView
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var mapView: GMSMapView!
    @IBOutlet weak var startBtn: UIButton!
    @IBOutlet weak var stopBtn: UIButton!
    
    
    @IBAction func startBtnClick(_ sender: Any) {
        interactor?.startTracking(request: .init())
    }
    
    @IBAction func stopBtnClick(_ sender: Any) {
        interactor?.stopTracking(request: .init())
    }
    
    @IBAction func loadBtnClick(_ sender: Any) {
        interactor?.loadTrack(request: .init())
    }
    
    @IBAction func signoutBtnClick(_ sender: Any) {
        UserDefaults.standard.set(false, forKey: "isLogin")
        onLogout?()
    }
    
    func addMarker(coordinate: CLLocationCoordinate2D) {
        if let marker = self.marker {
            
        } else {
            self.marker = GMSMarker(position: coordinate)
            self.marker?.icon = CustomMarker().markerWithAvatar(AvatarStore.load())
            self.marker?.map = mapView
            
        }
        self.marker?.position = coordinate
        
    }
    
    @IBAction func makeAvatar(_ sender: Any) {
        let imagePickerController = UIImagePickerController()
        if UIImagePickerController.isSourceTypeAvailable(.camera) {
            imagePickerController.sourceType = .camera
        } else {
            imagePickerController.sourceType = .savedPhotosAlbum
        }
        imagePickerController.allowsEditing = true
        imagePickerController.delegate = self
        
        present(imagePickerController, animated: true)
    }
    
    

    
    func updateScene(viewModel: MapModel.ViewModel) {
        self.startBtn.isEnabled = viewModel.startBtnEnable
        self.stopBtn.isEnabled = viewModel.stopBtnEnable
        if let routePath = viewModel.routePath {
            self.route?.path = routePath
        }
        if let camera = viewModel.cameraUpdate {
            self.mapView.animate(with: camera)
            
           
        }
        if let coordinate = viewModel.coordinate {
         addMarker(coordinate: CLLocationCoordinate2D(
             latitude: coordinate.latitude,
             longitude: coordinate.longitude))
        }
    }
}

extension MapViewController: UINavigationControllerDelegate, UIImagePickerControllerDelegate {
    
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
        // Если нажали на кнопку Отмена, то UIImagePickerController надо закрыть
        picker.dismiss(animated: true)
    }
    

    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]){
        // Мы получили медиа от контроллера
        // Изображение надо достать из словаря info
        let image = extractImage(from: info)
        print(image!)
        // Закрываем UIImagePickerController
        AvatarStore.save(image: image!)
        self.marker?.icon = CustomMarker().markerWithAvatar(image)
        picker.dismiss(animated: true)
    }
    
    // Метод, извлекающий изображение
    
    private func extractImage(from info: [UIImagePickerController.InfoKey: Any]) -> UIImage? {
        // Пытаемся извлечь отредактированное изображение
        if let image = info[.editedImage] as? UIImage {
            return image
            // Пытаемся извлечь оригинальное
        } else if let image = info[.originalImage] as? UIImage {
            return image
        } else {
            // Если изображение не получено, возвращаем nil
            return nil
        }
    }
}
